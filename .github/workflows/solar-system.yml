name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
            - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [20]
            operating_system: [ubuntu-latest]
            # exclude:
            #   - nodejs_version: 18
            #     operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}
    
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-$${{ hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          # if: failure() && (steps.nodejs-unit-testing-step.outcome == 'faliure' || steps.nodejs-unit-testing-step.outcome == 'success')
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml
            retention-days: 1

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      container: 
        image: node:18
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod
          options: 
            --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version -18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-$${{ hashFiles('package-lock.json')}}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 1

    docker:
      name: Containerisation
      permissions: # Added this as owner inherited the correct permissiosn to push packages but needed for others
        packages: write
      needs:
      - unit-testing
      - code-coverage
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha}}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=${{env.MONGO_URI}} \
            -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}

          export IP=$(docker inspect solar-system-app -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          echo $IP

          echo Testing Image URI using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registries Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha}}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha}}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # Set up kubeconfig from the GitHub Secret
        - name: Get OIDC Token from Keycloak
          run: |
              TOKEN=$(curl -X POST \
              ${{ secrets.KEYCLOAK_ISSUER_URL }}/protocol/openid-connect/token \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=github-actions" \
              -d "client_secret=${{ secrets.KEYCLOAK_CLIENT_SECRET }}" \
              -d "grant_type=client_credentials" | jq -r '.access_token')
              echo "generated token is: $TOKEN"
              echo "OIDC_TOKEN=$TOKEN" >> $GITHUB_ENV
          
        - name: Authenticate to Kubernetes
          run: |
              kubectl config set-credentials github-actions --token=$OIDC_TOKEN
              kubectl config set-cluster labgrid --server=https://k8s-server.labgrid.net
              kubectl config set-context labgrid --cluster=labgrid --user=github-actions
              kubectl config use-context labgrid

        # Verify kubectl is installed and check version
        - name: Check kubectl version
          run: kubectl version --client

        - name: List pods in the cluster
          run: kubectl get nodes

